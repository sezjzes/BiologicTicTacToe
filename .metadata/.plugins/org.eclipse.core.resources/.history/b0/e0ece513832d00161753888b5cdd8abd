import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
public class Strand {
	private ArrayList<Codon> codons;
	private int inMax;
	private int inMin;
	private int len;
	private double max;
	private double min;
	private double difference;
	public Strand(int number, int len, int max, int min) {
		this.len = len;
		inMax = max;
		inMin = min;
		codons = new ArrayList<Codon>();
		for (int i = 0; i < number; i++) addCodon();
		setExtreems();
	}
	public Strand(ArrayList<Codon> codons)
	{
		this.codons = codons;
		len = codons.get(0).getLen();
		inMax = codons.get(0).getInMax();
		inMin = codons.get(0).getInMin();
		setExtreems();
	}
	public Strand(Path filePath)
	{
		codons = new ArrayList<Codon>();
		try (BufferedReader reader = Files.newBufferedReader(filePath)) {
		    String line = null;
		    while ((line = reader.readLine()) != null) {
		        codons.add(new Codon(line));
		    }
		} catch (IOException x) {
		    System.err.format("IOException: %s%n", x);
		}
		len = codons.get(0).getLen();
		inMax = codons.get(0).getInMax();
		inMin = codons.get(0).getInMin();
		setExtreems();
	}
	public void setExtreems()
	{
		setMax(0);
		setMin(0);
		for (int j = 0; j < codons.size(); j++) 
		{
			Codon i = codons.get(j);
			setMax(getMax() + i.getMax());
			setMin(getMin() + i.getMin());
		}
		setDifference(getMax() - getMin());
	}
	public double eval(int[] info)
	{
		double ans = 0;
		for(Codon i: codons)
			ans += i.getValue(info);
		return ans;
	}
	public void save(Path filePath)
	{
		try (BufferedWriter writer= Files.newBufferedWriter(filePath)) {
		    for (Codon i: codons)
		    {
		    	writer.write(i.toString());
		    }
		} catch (IOException x) {
		    System.err.format("IOException: %s%n", x);
		    
		}
	}
	public Strand Duplicate()
	{
		return new Strand(codons);
	}
	public void addCodon() {
		codons.add(new Codon(len, inMax, inMin));
	}
	public void removeCodon()
	{
		codons.remove((int)(Math.random()*codons.size()));
	}
	public int move(int[] info, int options)
	{
		double num = eval(info);
		return Math.abs(((int)(((num - getMin())/ getDifference() * options))) % options);
	}
	public double getMax() {
		return max;
	}
	public void setMax(double max) {
		this.max = max;
	}
	public double getMin() {
		return min;
	}
	public void setMin(double min) {
		this.min = min;
	}
	public double getDifference() {
		return difference;
	}
	public void setDifference(double difference) {
		this.difference = difference;
	}
}
